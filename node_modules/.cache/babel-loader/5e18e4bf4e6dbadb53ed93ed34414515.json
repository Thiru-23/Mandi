{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\uriht\\\\OneDrive\\\\Desktop\\\\DigitalMandi-main\\\\src\\\\Context\\\\Crops\\\\CropState.js\",\n    _s = $RefreshSig$();\n\nimport react from \"react\";\nimport NoteContext from \"./CropContext\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  // const host = \"http://localhost:8000\";\n  const initialnotes = [];\n  const [crops, setCrops] = useState(initialnotes);\n  const [dashcrops, setdashCrops] = useState(initialnotes);\n  const [forbidcrops, setforbidCrops] = useState(initialnotes);\n  const [getlist, setgetList] = useState(initialnotes);\n  const [mcurrcrops, setmcurrCrops] = useState(initialnotes);\n  const [mdashcrops, setmdashCrops] = useState(initialnotes);\n  let history = useHistory(); //Get All current crops\n\n  const getCrops = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/current`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\")\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json(); //console.log(json);\n\n    setCrops(json);\n  };\n\n  const getforbidCrops = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/forbid`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\")\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json();\n    console.log(json);\n    setforbidCrops(json);\n  };\n\n  const getFdash = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/dashboard`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\")\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json();\n    console.log(localStorage.getItem(\"token\"));\n    console.log(json);\n    setdashCrops(json);\n  }; //Add New Note\n\n\n  const addCrop = async (name, address, plotno, weight, market, image) => {\n    let url = `${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/addcrop`; //API\n\n    console.log(image, \"nameeee:\");\n    const formdata = new FormData();\n    formdata.append(\"image\", image);\n    formdata.append(\"cropName\", name);\n    formdata.append(\"address\", address);\n    formdata.append(\"market\", market);\n    formdata.append(\"weight\", weight);\n    formdata.append(\"plotno\", plotno);\n\n    try {\n      let resp = await axios.post(url, formdata, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          auth: localStorage.getItem(\"token\")\n        }\n      });\n\n      if (resp.status === 200) {\n        window.alert(\"New Crop Added Successfull\");\n        window.location.reload();\n      }\n    } catch (error) {\n      window.alert(\"Failed\");\n      console.log(error);\n    }\n    /* const response = await fetch(\"/api/sell/farmer/addcrop\", {\n      method: \"POST\",\n      body: formdata,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \n        \"auth\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjI0MGJhYmVkOGIyOGE5MzYzOWFjNDBhIn0sImlhdCI6MTY0ODc5NDM2NX0.qp7L1j6kSKa03_bqpbicP92AM9T4FIbpjcgn1TBy88o\"\n          \n      },\n       // body data type must match \"Content-Type\" header\n    });\n    const crop= await response.json(); // parses JSON response into native JavaScript objects\n    if(crop.success){\n      window.alert(\"New Crop Added Successfull\");\n      history.push(\"/fdashboard\");\n    }\n    else{\n      window.alert(\"Failed\");\n      history.push(\"/addcrop\");\n    } */\n    // const note = {\n    //   _id: \"6207771315f6d8891d409859\",\n    //   user: \"61fd5073174cac209dea8d7a\",\n    //   title: title,\n    //   description: description,\n    //   tag: tag,\n    //   date: \"2022-02-08T15:32:04.135Z\",\n    //   __v: 0,\n    // };\n    //setCrops(crops.concat(crop));\n\n  };\n\n  const getlistMarket = async market => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/list`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n        market: market\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json();\n    console.log(json);\n    setgetList(json);\n  };\n  /* const bidCrop = async (id,price) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`/api/buy/merchant/list/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth\":localStorage.getItem('token'),\n      },\n      body: JSON.stringify({price})\n    });\n     const note = await response.json();\n    console.log(note);\n    \n  } */\n\n\n  const getmCurrent = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/current`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth\": localStorage.getItem('token')\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json(); //console.log(json);\n\n    setmcurrCrops(json);\n  }; //Delete Note\n\n\n  const deleteCrop = async id => {\n    if (window.confirm(\"Are you Sure You Want to Delete\")) {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/deletecrop/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          auth: localStorage.getItem(\"token\")\n        }\n      }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n      const json = await response.json();\n      console.log(json); // setCrops(json);\n\n      console.log(\"delete note with id\" + id);\n      const newCrop = crops.filter(note => {\n        return note._id !== id;\n      });\n      setCrops(newCrop);\n\n      if (response.status == 200) {\n        window.alert(\"Crop Deleted Successfull\");\n        window.location.reload(); // history.push(\"/addcrop\");\n        // getCrops();\n      } else {\n        window.alert(\"Not deleted Try Again\");\n      } // window.location.reload();\n\n    }\n  };\n\n  const getMdash = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/dashboard`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\")\n      }\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    const json = await response.json();\n    console.log(localStorage.getItem(\"token\"));\n    console.log(json);\n    setmdashCrops(json);\n  }; //Update\n\n\n  const editCrop = (id, cropName, address, plotno, weight, market) => {\n    //API\n    const response = fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/updatecrop/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify(cropName, address, plotno, weight, market) // body data type must match \"Content-Type\" header\n\n    }); // const json= response.json(); // parses JSON response into native JavaScript objects\n\n    if (response.status == 200) {\n      window.alert(\"updated\");\n      window.location.reload();\n    } else {\n      window.alert(\"not updated try again\");\n    } // for (let index = 0; index < crops.length; index++) {\n    //   const element = crops[index];\n    //   if (element._id === id) {\n    //     element.cropName = cropName;\n    //     element.address = address;\n    //     element.plotno = plotno;\n    //     element.weight = weight;\n    //     element.market = market;\n    //   }\n    // }\n    // ALL Merchant api calls.\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      crops,\n      dashcrops,\n      forbidcrops,\n      getlist,\n      mcurrcrops,\n      mdashcrops,\n      setCrops,\n      addCrop,\n      getFdash,\n      getforbidCrops,\n      getlistMarket,\n      getmCurrent,\n      editCrop,\n      deleteCrop,\n      getCrops,\n      getMdash\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"9xB+R1lIhcXpijqTN5kb7orL3kk=\", false, function () {\n  return [useHistory];\n});\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/uriht/OneDrive/Desktop/DigitalMandi-main/src/Context/Crops/CropState.js"],"names":["react","NoteContext","useHistory","useState","axios","NoteState","props","initialnotes","crops","setCrops","dashcrops","setdashCrops","forbidcrops","setforbidCrops","getlist","setgetList","mcurrcrops","setmcurrCrops","mdashcrops","setmdashCrops","history","getCrops","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","auth","localStorage","getItem","json","getforbidCrops","console","log","getFdash","addCrop","name","address","plotno","weight","market","image","url","formdata","FormData","append","resp","post","status","window","alert","location","reload","error","getlistMarket","getmCurrent","deleteCrop","id","confirm","newCrop","filter","note","_id","getMdash","editCrop","cropName","body","JSON","stringify","children"],"mappings":"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","sourcesContent":["import react from \"react\";\nimport NoteContext from \"./CropContext\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nconst NoteState = (props) => {\n  // const host = \"http://localhost:8000\";\n\n  const initialnotes = [];\n  const [crops, setCrops] = useState(initialnotes);\n  const [dashcrops, setdashCrops] = useState(initialnotes);\n  const [forbidcrops, setforbidCrops] = useState(initialnotes);\n  const [getlist, setgetList] = useState(initialnotes);\n  const [mcurrcrops, setmcurrCrops] = useState(initialnotes);\n  const [mdashcrops, setmdashCrops] = useState(initialnotes);\n  let history = useHistory();\n  //Get All current crops\n  const getCrops = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/current`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    //console.log(json);\n    setCrops(json);\n  };\n\n  const getforbidCrops = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/forbid`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    console.log(json);\n    setforbidCrops(json);\n  };\n\n  const getFdash = async () => {\n    //API\n\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/dashboard`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    console.log(localStorage.getItem(\"token\"));\n    console.log(json);\n    setdashCrops(json);\n  };\n\n  //Add New Note\n  const addCrop = async (name, address, plotno, weight, market, image) => {\n    let url = `${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/addcrop`;\n    //API\n    console.log(image, \"nameeee:\");\n    const formdata = new FormData();\n    formdata.append(\"image\", image);\n    formdata.append(\"cropName\", name);\n    formdata.append(\"address\", address);\n    formdata.append(\"market\", market);\n    formdata.append(\"weight\", weight);\n    formdata.append(\"plotno\", plotno);\n    try {\n      let resp = await axios.post(url, formdata, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n\n          auth: localStorage.getItem(\"token\"),\n        },\n      });\n\n      if (resp.status === 200) {\n        window.alert(\"New Crop Added Successfull\");\n\n        window.location.reload();\n      }\n    } catch (error) {\n      window.alert(\"Failed\");\n      console.log(error);\n    }\n\n    /* const response = await fetch(\"/api/sell/farmer/addcrop\", {\n      method: \"POST\",\n      body: formdata,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \n        \"auth\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjI0MGJhYmVkOGIyOGE5MzYzOWFjNDBhIn0sImlhdCI6MTY0ODc5NDM2NX0.qp7L1j6kSKa03_bqpbicP92AM9T4FIbpjcgn1TBy88o\"\n          \n      },\n       // body data type must match \"Content-Type\" header\n    });\n    const crop= await response.json(); // parses JSON response into native JavaScript objects\n    if(crop.success){\n      window.alert(\"New Crop Added Successfull\");\n      history.push(\"/fdashboard\");\n    }\n    else{\n      window.alert(\"Failed\");\n      history.push(\"/addcrop\");\n    } */\n\n    // const note = {\n    //   _id: \"6207771315f6d8891d409859\",\n    //   user: \"61fd5073174cac209dea8d7a\",\n    //   title: title,\n    //   description: description,\n    //   tag: tag,\n    //   date: \"2022-02-08T15:32:04.135Z\",\n    //   __v: 0,\n    // };\n\n    //setCrops(crops.concat(crop));\n  };\n  const getlistMarket = async (market) => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/list`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n        market: market,\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    console.log(json);\n    setgetList(json);\n  };\n\n  /* const bidCrop = async (id,price) => {\n    // TODO: API Call\n    // API Call \n    const response = await fetch(`/api/buy/merchant/list/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth\":localStorage.getItem('token'),\n      },\n      body: JSON.stringify({price})\n    });\n\n    const note = await response.json();\n    console.log(note);\n    \n  } */\n  const getmCurrent = async () => {\n    //API\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/current`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth\":\n        localStorage.getItem('token'),\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    //console.log(json);\n    setmcurrCrops(json);\n  };\n  //Delete Note\n  const deleteCrop = async (id) => {\n    if (window.confirm(\"Are you Sure You Want to Delete\")) {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/deletecrop/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          auth: localStorage.getItem(\"token\"),\n        },\n      });\n      // const json= response.json(); // parses JSON response into native JavaScript objects\n      const json = await response.json();\n      console.log(json);\n      // setCrops(json);\n      console.log(\"delete note with id\" + id);\n      const newCrop = crops.filter((note) => {\n        return note._id !== id;\n      });\n      setCrops(newCrop);\n      if(response.status==200){\n      window.alert(\"Crop Deleted Successfull\");\n      window.location.reload();\n      // history.push(\"/addcrop\");\n      // getCrops();\n    }\n      else{\n        window.alert(\"Not deleted Try Again\");\n      }\n      // window.location.reload();\n    }\n  };\n  const getMdash = async () => {\n    //API\n\n    const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/buy/merchant/dashboard`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n      },\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    const json = await response.json();\n    console.log(localStorage.getItem(\"token\"));\n    console.log(json);\n    setmdashCrops(json);\n  };\n  //Update\n  const editCrop = (id, cropName, address, plotno, weight, market) => {\n    //API\n    const response = fetch(`${process.env.REACT_APP_BACKEND_URL}/api/sell/farmer/updatecrop/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        auth: localStorage.getItem(\"token\"),\n      },\n\n      body: JSON.stringify(cropName, address, plotno, weight, market), // body data type must match \"Content-Type\" header\n    });\n    // const json= response.json(); // parses JSON response into native JavaScript objects\n    if(response.status==200){\n      window.alert(\"updated\");\n      window.location.reload();\n    }\n    else{\n      window.alert(\"not updated try again\");\n\n    }\n    // for (let index = 0; index < crops.length; index++) {\n    //   const element = crops[index];\n    //   if (element._id === id) {\n    //     element.cropName = cropName;\n    //     element.address = address;\n    //     element.plotno = plotno;\n    //     element.weight = weight;\n    //     element.market = market;\n    //   }\n    // }\n\n    // ALL Merchant api calls.\n  };\n  return (\n    <NoteContext.Provider\n      value={{ crops, dashcrops,forbidcrops,getlist,mcurrcrops,mdashcrops, setCrops, addCrop, getFdash, getforbidCrops,getlistMarket,getmCurrent, editCrop,deleteCrop, getCrops,getMdash }}\n    >\n      {props.children}\n    </NoteContext.Provider>\n  );\n};\n\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}